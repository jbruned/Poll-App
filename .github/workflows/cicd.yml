name: CI/CD
on:
  push:
    branches:
      - "**"
    tags:
      - "**"
  pull_request:
    branches:
      - main
  release:
    types:
      - published
jobs:
  lint:
    name: Linters
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Install dependencies
        run: make deps
      - name: Lint React app
        run: make lint-front
      - name: Lint Python app
        run: make lint-back
#  super-lint:
#    name: Lint (Super Linter)
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v3
#      - run: cat .github/super-linter.env >> "$GITHUB_ENV"
#      - name: Lint Code Base
#        uses: github/super-linter@v5
#        continue-on-error: true
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#          DEFAULT_BRANCH: develop
  test:
    name: Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Not implemented
        run: echo "This phase has not been implemented (yet)"
  build:
    name: Build
    if: github.event_name == 'release' || (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/'))
    runs-on: ubuntu-latest
    needs:
      - lint
      - test
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Install dependencies
        run: make deps
      - name: Build React app
        run: make build-front
      - name: Build Docker image
        run: make build-image
      - name: Save Docker image
        run: make save-image
        env:
          FILE_NAME: docker-image
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: docker-image
          path: ./docker-image.tar.gz
  publish:
    name: Publish
    runs-on: ubuntu-latest
    if: github.event_name == 'release' || (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/'))
    needs:
      - build
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: docker-image
          path: .
      - name: Decompress Docker image
        run: gzip -d docker-image.tar.gz -c > docker-image.tar
      - name: Load Docker image
        run: docker load -i docker-image.tar
      - name: Push image
        run: make push-ecr
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ vars.AWS_REGION }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
          AWS_IMAGE_NAME: ${{ vars.AWS_IMAGE_NAME }}
  deploy-prod:
    name: Deploy (production env)
    runs-on: ubuntu-latest
    environment:
      name: AWS (prod)
      url: ${{ steps.terraform_output.outputs.url }}
    if: github.event_name == 'release' && startsWith(github.ref, 'refs/tags/')
    needs:
      - publish
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
      - name: Test AWS CLI login
        run: (aws sts get-caller-identity > /dev/null && echo "Successfully logged in") || (echo "Error while logging in" && exit 1)
      - name: Import existing infrastructure
        run: cd deployment && bash import.sh fetch
      - name: Deploy core
        run: cd deployment && bash deploy.sh core
      - name: Create bastion host
        run: cd deployment && bash deploy.sh bastion
      - name: Create databases and users
        run: cd deployment && bash deploy.sh db
      - name: Initialize kong
        run: cd deployment && bash deploy.sh kong_init
      - name: Deploy app
        run: cd deployment && bash deploy.sh app
      - name: Setup kong
        run: cd deployment && bash deploy.sh kong
      - name: Destroy bastion host
        run: cd deployment && bash destroy.sh bastion
        continue-on-error: true
      - name: Output app URL
        run: cd deployment/core && terraform output url
      # - name: Get Terraform Output URL
        # id: terraform_output
        # run: cd deployment/core && { echo "url=$(terraform output -json http_url | grep -o 'http\(.*\).com')" >> $GITHUB_OUTPUT } || echo ""
        # run: cd deployment/core && { echo "url=$(terraform output -json http_url | grep -o 'http\(.*\).com')" >> $GITHUB_ENV; echo "url=$url" >> $GITHUB_OUTPUT; } || echo ""
      - name: Update domain DNS
        run: cd deployment && bash deploy.sh domain
      - name: Output public URL
        run: cd deployment/domain && terraform output public_url || echo "No public URL"
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ vars.AWS_REGION }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
      AWS_IMAGE_NAME: ${{ vars.AWS_IMAGE_NAME }}
      TF_VAR_AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      TF_VAR_PREFIX: ${{ vars.AWS_PREFIX }}
      TF_VAR_DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      TF_VAR_KONG_DB_PASSWORD: ${{ secrets.KONG_PASSWORD }}
      TF_VAR_RDS_PASSWORD: ${{ secrets.RDS_PASSWORD }}
      TF_VAR_BASTION_HOST_NAME: ${{ github.job }}
      TF_VAR_BASTION_DISPOSABLE_ID: ${{ github.run_id }}
      IONOS_API_KEY: ${{ secrets.IONOS_API_KEY }}
      TF_VAR_DOMAIN: ${{ vars.DOMAIN }}
      TF_VAR_SUBDOMAIN: ${{ vars.SUBDOMAIN }}
      TF_VAR_KONG_ADMIN_USER: ${{ vars.KONG_ADMIN_USER }}
      TF_VAR_KONG_ADMIN_PASSWORD: ${{ secrets.KONG_ADMIN_PASSWORD }}
  deploy-dev:
    name: Deploy (development env)
    if: github.event_name == 'release' || (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/'))
    runs-on: ubuntu-latest
    environment:
        name: AWS (dev)
        url: ${{ steps.terraform_output.outputs.url }}
    needs:
      - publish
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
      - name: Test AWS CLI login
        run: (aws sts get-caller-identity > /dev/null && echo "Successfully logged in") || (echo "Error while logging in" && exit 1)
      - name: Import existing infrastructure
        run: cd deployment && bash import.sh fetch
      - name: Deploy core
        run: cd deployment && bash deploy.sh core
      - name: Create bastion host
        run: cd deployment && bash deploy.sh bastion
      - name: Create databases and users
        run: cd deployment && bash deploy.sh db
      - name: Initialize kong
        run: cd deployment && bash deploy.sh kong_init
      - name: Deploy app
        run: cd deployment && bash deploy.sh app
      - name: Setup kong
        run: cd deployment && bash deploy.sh kong
      - name: Destroy bastion host
        run: cd deployment && bash destroy.sh bastion
        continue-on-error: true
      - name: Output app URL
        run: cd deployment/core && terraform output url
      # - name: Get Terraform Output URL
        # id: terraform_output
        # run: cd deployment/core && { echo "url=$(terraform output -json http_url | grep -o 'http\(.*\).com')" >> $GITHUB_OUTPUT } || echo ""
        # run: cd deployment/core && { echo "url=$(terraform output -json http_url | grep -o 'http\(.*\).com')" >> $GITHUB_ENV; echo "url=$url" >> $GITHUB_OUTPUT; } || echo ""
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ vars.AWS_REGION }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
      AWS_IMAGE_NAME: ${{ vars.AWS_IMAGE_NAME }}
      TF_VAR_AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      TF_VAR_PREFIX: ${{ vars.AWS_PREFIX }}
      TF_VAR_DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      TF_VAR_KONG_DB_PASSWORD: ${{ secrets.KONG_PASSWORD }}
      TF_VAR_RDS_PASSWORD: ${{ secrets.RDS_PASSWORD }}
      TF_VAR_BASTION_HOST_NAME: ${{ github.job }}
      TF_VAR_BASTION_DISPOSABLE_ID: ${{ github.run_id }}
      TF_VAR_CONTAINER_COUNT: ${{ vars.TASK_COUNT }}
      TF_VAR_CONTAINER_CPU: ${{ vars.TASK_CPU }}
      TF_VAR_CONTAINER_MEMORY: ${{ vars.TASK_MEMORY }}
      TF_VAR_KONG_ADMIN_USER: ${{ vars.KONG_ADMIN_USER }}
      TF_VAR_KONG_ADMIN_PASSWORD: ${{ secrets.KONG_ADMIN_PASSWORD }}
